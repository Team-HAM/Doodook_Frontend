// src/services/PushNotificationService.ios.js
import { Platform } from "react-native";
import * as Device from "expo-device";
import * as Notifications from "expo-notifications";
import Constants from "expo-constants";
import messaging from '@react-native-firebase/messaging';

export function setupNotificationListeners() {
  const recvSub = Notifications.addNotificationReceivedListener((n) => {
    try { console.log("[Push][recv]:", JSON.stringify(n, null, 2)); }
    catch { console.log("[Push][recv]"); }
  });
  const respSub = Notifications.addNotificationResponseReceivedListener((r) => {
    try { console.log("[Push][tap]:", JSON.stringify(r, null, 2)); }
    catch { console.log("[Push][tap]"); }
  });
  return () => {
    try {
      Notifications.removeNotificationSubscription(recvSub);
      Notifications.removeNotificationSubscription(respSub);
    } catch {}
  };
}

// FCM 토큰을 Expo Push Token으로 변환하는 함수
export async function convertFCMToExpoPushToken() {
  try {
    if (Platform.OS !== "ios") {
      throw new Error("iOS only");
    }
    
    if (!Device.isDevice) {
      throw new Error("실기기 필요");
    }

    // FCM 토큰 가져오기
    const fcmToken = await messaging().getToken();
    console.log("🔥 [FCM] FCM Token 획득:", fcmToken);

    // projectId 확인
    const projectId =
      (Constants.easConfig && Constants.easConfig.projectId) ||
      (Constants.expoConfig &&
        Constants.expoConfig.extra &&
        Constants.expoConfig.extra.eas &&
        Constants.expoConfig.extra.eas.projectId);

    if (!projectId) {
      throw new Error("EAS projectId 없음");
    }

    // FCM 토큰을 Expo Push Token으로 변환
    // Expo는 FCM 토큰을 자동으로 Expo Push Token 형식으로 변환합니다
    const expoPushToken = `ExponentPushToken[${fcmToken}]`;
    
    console.log("📢 [Push] FCM → Expo Push Token 변환 완료:", expoPushToken);
    
    return {
      success: true,
      fcmToken: fcmToken,
      expoPushToken: expoPushToken
    };
  } catch (error) {
    const msg = error?.message || String(error);
    console.error("❌ [Push] FCM → Expo Push Token 변환 실패:", msg);
    return {
      success: false,
      error: msg
    };
  }
}

// ✅ await 한 줄도 없음. Expo 토큰 "발급 & 로그만" 찍고 끝.
export function registerExpoPushToken(/* navigation? */) {
  return new Promise((resolve) => {
    try {
      if (Platform.OS !== "ios") {
        return resolve({ success: false, error: "iOS only (.ios.js)" });
      }
      if (!Device.isDevice) {
        return resolve({ success: false, error: "실기기 필요" });
      }

      // 1) 권한 확인
      Notifications.getPermissionsAsync()
        .then((perm) => {
          const existing = perm?.status;
          console.log("[Push] permissions(existing):", existing, perm);

          if (existing === "granted") return "granted";
          // 권한 요청
          return Notifications.requestPermissionsAsync({
            ios: { allowAlert: true, allowBadge: true, allowSound: true },
          }).then((r) => r?.status || "undetermined");
        })
        .then((finalStatus) => {
          console.log("[Push] permission:", finalStatus);
          if (finalStatus !== "granted") {
            throw new Error("알림 권한 거부됨");
          }

          // 2) FCM 토큰을 Expo Push Token으로 변환
          return convertFCMToExpoPushToken();
        })
        .then((result) => {
          if (result.success) {
            console.log("📢 [Push] ExpoPushToken 발급됨:", result.expoPushToken);
            resolve({ 
              success: true, 
              expoPushToken: result.expoPushToken,
              fcmToken: result.fcmToken
            });
          } else {
            throw new Error(result.error);
          }
        })
        .catch((err) => {
          const msg = err?.message || String(err);
          console.warn("[Push][ERR] registerExpoPushToken:", msg);
          resolve({ success: false, error: msg });
        });
    } catch (e) {
      const msg = e?.message || String(e);
      console.warn("[Push][ERR] registerExpoPushToken(sync):", msg);
      resolve({ success: false, error: msg });
    }
  });
}
