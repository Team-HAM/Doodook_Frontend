import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  TextInput,
  Image,
} from "react-native";
import AsyncStorage from "@react-native-async-storage/async-storage";

import BellIcon from "../../assets/icons/bell.svg";
import SearchIcon from "../../assets/icons/search.svg";

const mockStocks = [
  {
    id: 1,
    name: "Î±ÖÍ∞ÄÎìú ÌÜ†ÌÉà ÎØ∏Íµ≠ Ï£ºÏãù ETF",
    price: "429,710",
    change: "+0.03",
    isFavorite: true,
  },
  {
    id: 2,
    name: "Ïä§Ìè¨Ìã∞ÌååÏù¥ ÌÖåÌÅ¨ÎÜÄÎ°úÏßÄ",
    price: "692,438",
    change: "+0.75",
    isFavorite: true,
  },
  {
    id: 3,
    name: "Kingdom of Banana",
    price: "4,000",
    change: "+9.13",
    isFavorite: false,
  },
];

const MainScreen = ({ navigation }) => {
  const [searchText, setSearchText] = useState("");
  const [watchlist, setWatchlist] = useState(mockStocks);
  const [balance, setBalance] = useState("0Ïõê");

  useEffect(() => {
    const fetchUserBalance = async () => {
      try {
        // Get the access token from AsyncStorage
        const accessToken = await AsyncStorage.getItem("accessToken");

        if (!accessToken) {
          console.error("Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏäµÎãàÎã§.");
          navigation.navigate("Login");
          return;
        }

        console.log("ÏÇ¨Ïö© Ï§ëÏù∏ Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞:", accessToken);

        const response = await fetch(
          "https://port-0-doodook-backend-lyycvlpm0d9022e4.sel4.cloudtype.app/users/account/",
          {
            headers: {
              Authorization: `Bearer ${accessToken}`,
              "Content-Type": "application/json",
            },
          }
        );

        // ÏùëÎãµ ÏÉÅÌÉú Î°úÍπÖ
        console.log("ÏùëÎãµ ÏÉÅÌÉú:", response.status);

        // Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞Ïù¥ ÎßåÎ£åÎêú Í≤ΩÏö∞ (401 Unauthorized)
        if (response.status === 401) {
          const refreshToken = await AsyncStorage.getItem("refreshToken");

          if (refreshToken) {
            // Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞ÏúºÎ°ú ÏÉà Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ ÏöîÏ≤≠
            const refreshResponse = await fetch(
              "https://port-0-doodook-backend-lyycvlpm0d9022e4.sel4.cloudtype.app/api/token/refresh/",
              {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  refresh: refreshToken,
                }),
              }
            );

            const refreshData = await refreshResponse.json();

            if (refreshResponse.ok && refreshData.access) {
              // ÏÉà Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ Ï†ÄÏû•
              await AsyncStorage.setItem("accessToken", refreshData.access);

              // ÏÉà ÌÜ†ÌÅ∞ÏúºÎ°ú Îã§Ïãú ÏöîÏ≤≠
              return fetchUserBalance();
            } else {
              // Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞ÎèÑ ÎßåÎ£åÎêú Í≤ΩÏö∞ Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏúºÎ°ú
              console.error("Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞Ïù¥ ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§.");
              navigation.navigate("Login");
              return;
            }
          } else {
            // Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞Ïù¥ ÏóÜÎäî Í≤ΩÏö∞ Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏúºÎ°ú
            console.error("Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏäµÎãàÎã§.");
            navigation.navigate("Login");
            return;
          }
        }

        // ÏùëÎãµ Î≥∏Î¨∏ Î°úÍπÖ
        const text = await response.text();
        console.log("ÏùëÎãµ Î≥∏Î¨∏:", text);

        try {
          // ÌÖçÏä§Ìä∏Î•º JSONÏúºÎ°ú ÌååÏã±
          const data = JSON.parse(text);

          // Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ Î°úÍπÖ
          console.log("Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞:", data);

          // ÏùëÎãµ Íµ¨Ï°∞ Î°úÍπÖ (Î™®Îì† ÌÇ§ ÌôïÏù∏)
          console.log("ÏùëÎãµÏùò ÏµúÏÉÅÏúÑ ÌÇ§Îì§:", Object.keys(data));

          // Ï†ïÌôïÌïú ÏùëÎãµ Íµ¨Ï°∞Ïóê ÎßûÍ≤å ÏûîÍ≥† Ï∂îÏ∂ú
          let userBalance = null;

          // status/data/balance Íµ¨Ï°∞ (ÌôïÏù∏Îêú ÏùëÎãµ Íµ¨Ï°∞)
          if (data?.status === "success" && data?.data?.balance !== undefined) {
            userBalance = data.data.balance;
            console.log("ÏùëÎãµÏóêÏÑú ÏûîÍ≥† Ï∞æÏùå:", userBalance);
          }
          // Í∏∞ÌÉÄ Í∞ÄÎä•Ìïú Í≤ΩÎ°ú ÏòàÏô∏ Ï≤òÎ¶¨
          else if (data?.balance !== undefined) {
            userBalance = data.balance;
            console.log("ÎåÄÏ≤¥ Í≤ΩÎ°úÏóêÏÑú ÏûîÍ≥† Ï∞æÏùå:", userBalance);
          } else {
            console.log("Ïïå Ïàò ÏóÜÎäî ÏùëÎãµ Íµ¨Ï°∞, Ï†ÑÏ≤¥ ÏùëÎãµ:", data);
            userBalance = 0;
          }

          // Ïà´ÏûêÎ°ú Î≥ÄÌôò Î∞è ÌòïÏãù ÏßÄÏ†ï
          const formattedBalance =
            Number(userBalance || 0).toLocaleString() + "Ïõê";
          console.log("ÏµúÏ¢Ö ÌòïÏãùÌôîÎêú ÏûîÍ≥†:", formattedBalance);
          setBalance(formattedBalance);
        } catch (parseError) {
          console.error("JSON ÌååÏã± Ïò§Î•ò:", parseError);
          setBalance("0Ïõê");
        }
      } catch (error) {
        console.error("ÏûîÍ≥† Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:", error);
        setBalance("0Ïõê");
      }
    };

    fetchUserBalance();
  }, []);

  const toggleFavorite = (id) => {
    setWatchlist(
      watchlist.map((stock) =>
        stock.id === id ? { ...stock, isFavorite: !stock.isFavorite } : stock
      )
    );
  };

  return (
    <View style={styles.container}>
      <View style={styles.searchContainer}>
        <TextInput
          style={styles.searchInput}
          placeholder="Ï£ºÏãùÎ™Ö Í≤ÄÏÉâ"
          value={searchText}
          onChangeText={setSearchText}
        />
        <TouchableOpacity>
          <SearchIcon style={styles.SearchIcon} width={24} height={24} />
        </TouchableOpacity>
        <TouchableOpacity>
          <BellIcon style={styles.BellIcon} width={24} height={24} />
        </TouchableOpacity>
      </View>

      <View style={styles.assetContainer}>
        <Text style={styles.assetLabel}>ÏûêÏÇ∞</Text>
        <Text style={styles.assetValue}>{balance}</Text>
        <View style={styles.graphContainer}>
          <View style={styles.mockGraph} />
        </View>
      </View>

      <TouchableOpacity
        style={styles.tradeButton}
        onPress={() => navigation.navigate("StockTrade")}
      >
        <Text style={styles.tradeButtonText}>Ï£ºÏãù Í±∞ÎûòÌïòÍ∏∞ üìà</Text>
      </TouchableOpacity>

      <View style={styles.watchlistContainer}>
        <Text style={styles.watchlistTitle}>ÎÇòÏùò Í¥ÄÏã¨ Ï£ºÏãù</Text>
        <ScrollView>
          {watchlist.map((stock) => (
            <View key={stock.id} style={styles.stockItem}>
              <TouchableOpacity onPress={() => toggleFavorite(stock.id)}>
                <Image
                  source={
                    stock.isFavorite
                      ? require("../../assets/icons/star-filled.png")
                      : require("../../assets/icons/star-empty.png")
                  }
                  style={styles.starIcon}
                />
              </TouchableOpacity>
              <Text style={styles.stockName}>{stock.name}</Text>
              <View style={styles.stockPriceContainer}>
                <Text style={styles.stockPrice}>{stock.price}Ïõê</Text>
                <Text style={styles.stockChange}>{stock.change}%</Text>
              </View>
            </View>
          ))}
        </ScrollView>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#003340",
    padding: 30,
    paddingBottom: 90,
  },
  searchContainer: {
    marginTop: 40,
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 20,
    justifyContent: "space-between",
  },
  SearchIcon: {
    width: 24,
    height: 24,
    fill: "#EFF1F5",
    right: 10,
    marginLeft: 10,
  },
  BellIcon: {
    width: 24,
    height: 24,
    fill: "#EFF1F5",
  },
  searchInput: {
    flex: 1,
    backgroundColor: "#EFF1F5",
    borderRadius: 13,
    padding: 10,
    marginRight: 10,
  },
  assetContainer: {
    marginBottom: 20,
  },
  assetLabel: {
    color: "#F074BA",
    fontSize: 18,
  },
  assetValue: {
    color: "#F074BA",
    fontSize: 40,
    fontWeight: "bold",
  },
  graphContainer: {
    height: 200,
    backgroundColor: "#004455",
    borderRadius: 8,
    marginTop: 10,
  },
  percentageContainer: {
    position: "absolute",
    right: 10,
    top: 10,
  },
  tradeButton: {
    backgroundColor: "#EFF1F5",
    padding: 13,
    borderRadius: 13,
    alignItems: "center",
    marginBottom: 20,
  },
  tradeButtonText: {
    color: "#003340",
    fontSize: 18,
    fontWeight: "900",
  },
  watchlistContainer: {
    flex: 1,
  },
  watchlistTitle: {
    color: "#F074BA",
    fontSize: 18,
    marginBottom: 5,
    marginLeft: 5,
    marginTop: 5,
    fontWeight: "600",
  },
  stockItem: {
    flexDirection: "row",
    alignItems: "center",
    padding: 5,
    borderBottomWidth: 1,
    borderBottomColor: "#004455",
  },
  stockName: {
    flex: 1,
    color: "#EFF1F5",
    marginLeft: 10,
  },
  stockPriceContainer: {
    alignItems: "flex-end",
  },
  stockPrice: {
    color: "#EFF1F5",
  },
  stockChange: {
    color: "#F074BA",
    fontWeight: "bold",
  },
  starIcon: {
    width: 20,
    height: 20,
  },
  percentageText: {
    color: "#EFF1F5",
  },
  percentageBar: {
    marginBottom: 5,
  },
  shadow: {
    shadowColor: "rgb(255, 210, 229)",
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  },
});

export default MainScreen;
