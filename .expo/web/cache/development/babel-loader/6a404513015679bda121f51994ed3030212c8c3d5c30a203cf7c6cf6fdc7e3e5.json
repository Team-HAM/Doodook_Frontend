{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { chatbotReply } from \"../../utils/chatbotReply\";\nimport SearchIcon from \"../../assets/icons/search.svg\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ChatbotScreen = function ChatbotScreen() {\n  var _useState = useState([{\n      sender: 'bot',\n      text: 'ÏïàÎÖïÌïòÏÑ∏Ïöî! Î¨¥ÏóáÏùÑ ÎèÑÏôÄÎìúÎ¶¥ÍπåÏöî?'\n    }]),\n    _useState2 = _slicedToArray(_useState, 2),\n    messages = _useState2[0],\n    setMessages = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    input = _useState4[0],\n    setInput = _useState4[1];\n  var scrollRef = useRef();\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    loading = _useState6[0],\n    setLoading = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    showSuggestions = _useState8[0],\n    setShowSuggestions = _useState8[1];\n  var suggestions = [\"Ï£ºÏãù ÏãúÏûë\", \"PER\", \"Î∞∞ÎãπÍ∏à\", \"Ïö∞ÎüâÏ£º\", \"ÏÑ†Î¨º\", \"Ìò∏Í∞ÄÏ∞Ω\", \"Î∂ÑÏÇ∞Ìà¨ÏûêÍ∞Ä Ïôú ÌïÑÏöîÌï¥?\", \"ÏÉÅÏû•ÌèêÏßÄ\", \"ÏΩîÏä§ÌîºÎûë ÏΩîÏä§Îã• Ï∞®Ïù¥Ï†ê\", \"Í≥µÎß§ÎèÑ\", \"Ï£ºÏãù Í±∞Îûò ÏãúÍ∞Ñ\", \"ÌèâÎã®Í∞Ä\", \"Îß§Ïàò&Îß§ÎèÑ\", \"ÏãúÍ∞Ä\", \"ÏàòÏàòÎ£å\", \"ETF\"];\n  var sendMessage = function () {\n    var _ref = _asyncToGenerator(function* () {\n      if (!input.trim()) return;\n      var userMsg = {\n        sender: 'user',\n        text: input\n      };\n      var loadingMsg = {\n        sender: 'bot',\n        text: '...'\n      };\n      setMessages(function (prev) {\n        return [].concat(_toConsumableArray(prev), [userMsg, loadingMsg]);\n      });\n      setInput('');\n      setLoading(true);\n      setTimeout(function () {\n        var _scrollRef$current;\n        (_scrollRef$current = scrollRef.current) == null ? void 0 : _scrollRef$current.scrollToEnd({\n          animated: true\n        });\n      }, 100);\n      var reply = yield chatbotReply(input);\n      console.log(\"ü§ñ chatbotReply:\", reply);\n      console.log(\"üìè Í∏∏Ïù¥:\", reply.length);\n      setMessages(function (prev) {\n        var newMessages = _toConsumableArray(prev);\n        newMessages.pop();\n        return [].concat(_toConsumableArray(newMessages), [{\n          sender: 'bot',\n          text: reply\n        }]);\n      });\n      setLoading(false);\n      setTimeout(function () {\n        var _scrollRef$current2;\n        (_scrollRef$current2 = scrollRef.current) == null ? void 0 : _scrollRef$current2.scrollToEnd({\n          animated: true\n        });\n      }, 100);\n    });\n    return function sendMessage() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsxs(KeyboardAvoidingView, {\n    style: styles.container,\n    behavior: Platform.OS === 'ios' ? 'padding' : undefined,\n    keyboardVerticalOffset: 70,\n    children: [_jsx(ScrollView, {\n      ref: scrollRef,\n      style: {\n        flex: 1\n      },\n      contentContainerStyle: styles.chatContainer,\n      keyboardShouldPersistTaps: \"handled\",\n      children: messages.map(function (msg, index) {\n        return _jsx(View, {\n          style: msg.sender === 'user' ? styles.userMessage : styles.botMessage,\n          children: msg.text === '...' && msg.sender === 'bot' ? _jsx(ActivityIndicator, {\n            size: \"small\",\n            color: \"#999\"\n          }) : _jsx(Text, {\n            style: msg.sender === 'user' ? styles.userText : styles.botText,\n            numberOfLines: 0,\n            ellipsizeMode: \"tail\",\n            children: msg.text\n          })\n        }, index);\n      })\n    }), showSuggestions && _jsx(View, {\n      style: styles.suggestionContainer,\n      children: suggestions.map(function (item, idx) {\n        return _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            setInput(item);\n            setShowSuggestions(false);\n          },\n          style: styles.suggestionPill,\n          children: _jsx(Text, {\n            style: styles.suggestionText,\n            children: item\n          })\n        }, idx);\n      })\n    }), _jsxs(View, {\n      style: styles.inputBar,\n      children: [_jsx(TouchableOpacity, {\n        style: [styles.hashButton, showSuggestions && styles.hashButtonActive],\n        onPress: function onPress() {\n          return setShowSuggestions(function (prev) {\n            return !prev;\n          });\n        },\n        children: _jsx(Text, {\n          style: styles.hashText,\n          children: \"#\"\n        })\n      }), _jsx(TextInput, {\n        style: styles.textInput,\n        placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694\",\n        placeholderTextColor: \"#aaa\",\n        value: input,\n        onChangeText: setInput,\n        onSubmitEditing: sendMessage\n      }), _jsx(TouchableOpacity, {\n        onPress: sendMessage,\n        children: _jsx(SearchIcon, {\n          width: 24,\n          height: 24\n        })\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#003340'\n  },\n  chatContainer: {\n    flexGrow: 1,\n    paddingTop: 60,\n    paddingHorizontal: 20,\n    paddingBottom: 120\n  },\n  botMessage: {\n    backgroundColor: '#E0E6E7',\n    borderRadius: 10,\n    padding: 12,\n    alignSelf: 'flex-start',\n    marginBottom: 10,\n    maxWidth: '80%',\n    marginRight: 30\n  },\n  botText: {\n    color: '#222',\n    fontSize: 15,\n    lineHeight: 22\n  },\n  userMessage: {\n    backgroundColor: '#D567A1',\n    borderRadius: 10,\n    padding: 12,\n    alignSelf: 'flex-end',\n    marginBottom: 10,\n    maxWidth: '80%'\n  },\n  userText: {\n    color: 'white',\n    fontSize: 15\n  },\n  inputBar: {\n    position: 'absolute',\n    bottom: 65,\n    left: 0,\n    right: 0,\n    flexDirection: 'row',\n    padding: 18,\n    backgroundColor: '#003340',\n    alignItems: 'center'\n  },\n  hashButton: {\n    width: 36,\n    height: 36,\n    borderRadius: 10,\n    backgroundColor: '#D567A1',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: 8\n  },\n  hashButtonActive: {\n    backgroundColor: '#738C93'\n  },\n  hashText: {\n    color: 'white',\n    fontWeight: 'bold',\n    fontSize: 20\n  },\n  suggestionContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    bottom: 140,\n    paddingHorizontal: 20,\n    paddingTop: 20,\n    paddingBottom: 20,\n    gap: 8,\n    backgroundColor: '#738C93'\n  },\n  suggestionPill: {\n    backgroundColor: '#e5e5e5',\n    paddingVertical: 8,\n    paddingHorizontal: 10,\n    borderRadius: 20,\n    marginRight: 8,\n    marginBottom: 4\n  },\n  suggestionText: {\n    fontSize: 14,\n    color: '#003340'\n  },\n  textInput: {\n    flex: 1,\n    backgroundColor: '#3D5B66',\n    borderRadius: 10,\n    paddingHorizontal: 15,\n    paddingVertical: 10,\n    color: 'white',\n    fontSize: 15,\n    marginRight: 8\n  },\n  searchText: {\n    fontSize: 20,\n    color: 'white'\n  }\n});\nexport default ChatbotScreen;","map":{"version":3,"names":["React","useState","useRef","View","Text","StyleSheet","TextInput","TouchableOpacity","KeyboardAvoidingView","Platform","ScrollView","ActivityIndicator","chatbotReply","SearchIcon","jsx","_jsx","jsxs","_jsxs","ChatbotScreen","_useState","sender","text","_useState2","_slicedToArray","messages","setMessages","_useState3","_useState4","input","setInput","scrollRef","_useState5","_useState6","loading","setLoading","_useState7","_useState8","showSuggestions","setShowSuggestions","suggestions","sendMessage","_ref","_asyncToGenerator","trim","userMsg","loadingMsg","prev","concat","_toConsumableArray","setTimeout","_scrollRef$current","current","scrollToEnd","animated","reply","console","log","length","newMessages","pop","_scrollRef$current2","apply","arguments","style","styles","container","behavior","OS","undefined","keyboardVerticalOffset","children","ref","flex","contentContainerStyle","chatContainer","keyboardShouldPersistTaps","map","msg","index","userMessage","botMessage","size","color","userText","botText","numberOfLines","ellipsizeMode","suggestionContainer","item","idx","onPress","suggestionPill","suggestionText","inputBar","hashButton","hashButtonActive","hashText","textInput","placeholder","placeholderTextColor","value","onChangeText","onSubmitEditing","width","height","create","backgroundColor","flexGrow","paddingTop","paddingHorizontal","paddingBottom","borderRadius","padding","alignSelf","marginBottom","maxWidth","marginRight","fontSize","lineHeight","position","bottom","left","right","flexDirection","alignItems","justifyContent","fontWeight","flexWrap","gap","paddingVertical","searchText"],"sources":["/Users/seungyeon/Doodook_Frontend/src/screens/Chatbot/ChatbotScreen.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TextInput,\n  TouchableOpacity,\n  KeyboardAvoidingView,\n  Platform,\n  ScrollView,\n  ActivityIndicator,\n} from 'react-native';\n\nimport { chatbotReply } from '../../utils/chatbotReply';\nimport SearchIcon from \"../../assets/icons/search.svg\";\n\n// const ChatbotScreen = () => {\n//   console.log('ChatbotScreen Î†åÎçîÎßÅ');\n//   return (\n//     <View style={styles.container}>\n//       <Text style={styles.text}>Chatbot Screen</Text>\n//     </View>\n//   );\n// };\n\n// const ChatbotScreen = () => {\n//   return (\n    \n//     <KeyboardAvoidingView\n//       style={styles.container}\n//       behavior={Platform.OS === 'ios' ? 'padding' : undefined}\n//       keyboardVerticalOffset={70} // ‚úÖ Ïù¥Í±∞ Ï∂îÍ∞Ä!\n//     >\n//       <ScrollView \n//       contentContainerStyle={styles.chatContainer}\n//         keyboardShouldPersistTaps=\"handled\" // ‚úÖ Ïù¥Í±∞ Ï∂îÍ∞Ä!\n//         >\n//         <View style={styles.botMessage}>\n//           <Text style={styles.botText}>ÏïàÎÖïÌïòÏÑ∏Ïöî! Î¨¥ÏóáÏùÑ ÎèÑÏôÄÎìúÎ¶¥ÍπåÏöî?</Text>\n//         </View>\n\n//         <View style={styles.userMessage}>\n//           <Text style={styles.userText}>ETF Ìà¨ÏûêÍ∞Ä Î≠êÏïº?</Text>\n//         </View>\n\n//         <View style={styles.botMessage}>\n//           <Text style={styles.botText}>\n//             ETF Ìà¨ÏûêÎ•º ÏÉùÍ∞ÅÌï¥Î≥¥Î©¥, Ïù¥Í≤å ÎßàÏπò ÏáºÌïëÎ™∞ÏóêÏÑú Ïû•Î∞îÍµ¨ÎãàÏóê Ïó¨Îü¨ Í∞ÄÏßÄ ÏÉÅÌíàÏùÑ Îã¥Îäî Í≤ÉÍ≥º ÎπÑÏä∑Ìï¥Ïöî. ETFÎäî Ï£ºÏãù, Ï±ÑÍ∂å Îì± Îã§ÏñëÌïú ÏûêÏÇ∞ÏúºÎ°ú Ïù¥Î£®Ïñ¥Ï†∏ ÏûàÏñ¥Ïöî. Ïù¥Í±∏ ÏÇ¨Îäî Í≤ÉÏùÄ Í∑∏ Ïû•Î∞îÍµ¨Îãà Ï†ÑÏ≤¥Î•º Ìïú Î≤àÏóê ÏÇ¨Îäî Í≤ÉÏù¥Îûë Í∞ôÏïÑÏöî. Í∑∏ÎûòÏÑú ÏöîÏ¶òÏùÄ Ïù¥Îü∞ ETF Ìà¨ÏûêÎ•º ÎßéÏù¥ Ï∂îÏ≤úÌïòÎäîÎç∞, Í∑∏ Ïù¥Ïú†Îäî Ìïú Î≤àÏóê ÎßéÏùÄ Ï¢ÖÎ™©Ïùò Ï£ºÏãùÏùÑ ÏÇ¨Îäî Í≤ÉÎ≥¥Îã§ ÏúÑÌóòÏùÑ Î∂ÑÏÇ∞ÏãúÌÇ¨ Ïàò ÏûàÍ∏∞ ÎïåÎ¨∏Ïù¥ÏóêÏöî. Ïù¥Î†áÍ≤å Ìï¥ÏÑú Ïó¨Îü¨ Ï¢ÖÎ™©Ïùò Ï£ºÏãùÏùÑ Ìïú Î≤àÏóê Í¥ÄÎ¶¨Ìï† Ïàò ÏûàÏñ¥Ïöî!\n//           </Text>\n//         </View>\n\n//         <View style={styles.userMessage}>\n//           <Text style={styles.userText}>ETF Ìà¨ÏûêÍ∞Ä Î≠êÏïº? ETF Ìà¨ÏûêÍ∞Ä Î≠êÏïº?</Text>\n//         </View>\n\n//         <View style={styles.botMessage}>\n//           <Text style={styles.botText}>\n//             Ïù¥Îûë Í∞ôÏïÑÏöî. Í∑∏ÎûòÏÑú ÏöîÏ¶òÏùÄ Ïù¥Îü∞ ETF Ìà¨ÏûêÎ•º ÎßéÏù¥ Ï∂îÏ≤úÌïòÎäîÎç∞, Í∑∏ Ïù¥Ïú†Îäî Ìïú Î≤àÏóê ÎßéÏùÄ\n//           </Text>\n//         </View>\n      \n      \n      \n      \n      \n//       </ScrollView>\n\n//       <View style={styles.inputBar}>\n//         <TouchableOpacity style={styles.hashButton}>\n//           <Text style={styles.hashText}>#</Text>\n//         </TouchableOpacity>\n//         <TextInput\n//           style={styles.textInput}\n//           placeholder=\"Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî\"\n//           placeholderTextColor=\"#aaa\"\n//         />\n//         <TouchableOpacity style={styles.searchButton}>\n//           <Text style={styles.searchText}>üîç</Text>\n//         </TouchableOpacity>\n//       </View>\n//     </KeyboardAvoidingView>\n//   );\n// };\n\nconst ChatbotScreen = () => {\n  const [messages, setMessages] = useState([\n    { sender: 'bot', text: 'ÏïàÎÖïÌïòÏÑ∏Ïöî! Î¨¥ÏóáÏùÑ ÎèÑÏôÄÎìúÎ¶¥ÍπåÏöî?' },\n  ]);\n  const [input, setInput] = useState('');\n  const scrollRef = useRef();\n  const [loading, setLoading] = useState(false);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  \n// const suggestions = [\n//   \"Ïù∏Í∏∞ Ï£ºÏãù\", \"AI Ï∂îÏ≤ú Ï¢ÖÎ™©\", \"Ïû• Ï¥àÎ∞ò Ïù¥Ïäà\", \"ÎåÄÏû•Ï£º\",\n//   \"Ïñ¥Ï†úÏùò Í∏âÏÉÅÏäπ 10\", \"ÏΩîÏä§Ìîº/ÏΩîÏä§Îã• ÏÉÅÏäπÎ•†\", \"Î∞∞ÎãπÏ£º Ï∂îÏ≤ú\", \"Í≤ÄÏÉâ Í∏âÏÉÅÏäπ Ï¢ÖÎ™©\"\n// ];\n\nconst suggestions = [\n  \"Ï£ºÏãù ÏãúÏûë\", \"PER\", \"Î∞∞ÎãπÍ∏à\", \"Ïö∞ÎüâÏ£º\", \"ÏÑ†Î¨º\",\n  \"Ìò∏Í∞ÄÏ∞Ω\", \"Î∂ÑÏÇ∞Ìà¨ÏûêÍ∞Ä Ïôú ÌïÑÏöîÌï¥?\", \"ÏÉÅÏû•ÌèêÏßÄ\",\n  \"ÏΩîÏä§ÌîºÎûë ÏΩîÏä§Îã• Ï∞®Ïù¥Ï†ê\", \"Í≥µÎß§ÎèÑ\", \"Ï£ºÏãù Í±∞Îûò ÏãúÍ∞Ñ\",\n  \"ÌèâÎã®Í∞Ä\", \"Îß§Ïàò&Îß§ÎèÑ\", \"ÏãúÍ∞Ä\", \"ÏàòÏàòÎ£å\", \"ETF\"\n];\n\n  // const suggestions = [\n  // \"ETF Ìà¨ÏûêÍ∞Ä Î≠êÏïº?\",\n  // \"ÏÇºÏÑ±Ï†ÑÏûê Ï£ºÏãù Ïñ¥Îïå?\",\n  // \"Ïπ¥Ïπ¥Ïò§ Ïã§Ï†ÅÏùÄ Ïñ¥Îïå?\",\n  // \"ÏöîÏ¶ò Îú®Îäî ÏÇ∞ÏóÖ ÏïåÎ†§Ï§ò\",\n  // \"AI Í¥ÄÎ†®Ï£º ÏïåÎ†§Ï§ò\",\n  // ];\n\nconst sendMessage = async () => {\n  if (!input.trim()) return;\n\n  const userMsg = { sender: 'user', text: input };\n  const loadingMsg = { sender: 'bot', text: '...' };\n\n  setMessages((prev) => [...prev, userMsg, loadingMsg]);\n  setInput('');\n  setLoading(true);\n\n  setTimeout(() => {\n    scrollRef.current?.scrollToEnd({ animated: true });\n  }, 100);\n\n  const reply = await chatbotReply(input);\n\n  console.log(\"ü§ñ chatbotReply:\", reply);\n  console.log(\"üìè Í∏∏Ïù¥:\", reply.length);\n\n  setMessages((prev) => {\n    const newMessages = [...prev];\n    newMessages.pop(); // loading Î©îÏãúÏßÄ Ï†úÍ±∞\n    return [...newMessages, { sender: 'bot', text: reply }];\n  });\n\n  setLoading(false);\n\n  // Ïä§ÌÅ¨Î°§\n  setTimeout(() => {\n    scrollRef.current?.scrollToEnd({ animated: true });\n  }, 100);\n};\n\n\n\n  return (\n    <KeyboardAvoidingView\n      style={styles.container}\n      \n      behavior={Platform.OS === 'ios' ? 'padding' : undefined}\n      keyboardVerticalOffset={70}\n    >\n      <ScrollView\n        ref={scrollRef}\n        style={{ flex: 1 }} \n        contentContainerStyle={styles.chatContainer}\n        keyboardShouldPersistTaps=\"handled\"\n      >\n{messages.map((msg, index) => (\n  <View\n    key={index}\n    style={msg.sender === 'user' ? styles.userMessage : styles.botMessage}\n  >\n    {msg.text === '...' && msg.sender === 'bot' ? (\n      <ActivityIndicator size=\"small\" color=\"#999\" />\n    ) : (\n      <Text style={msg.sender === 'user' ? styles.userText : styles.botText}\n      numberOfLines={0}         // ‚úÖ Î¨¥Ï†úÌïú Ï§Ñ\n      ellipsizeMode=\"tail\"      // ‚úÖ ÏûòÎ¶¨Î©¥ ÎßêÏ§ÑÏûÑÌëúÎ°ú\n      >\n        {msg.text}\n      </Text>\n    )}\n  </View>\n))}\n\n      </ScrollView>\n\n{showSuggestions && (\n  <View style={styles.suggestionContainer}>\n    {suggestions.map((item, idx) => (\n      <TouchableOpacity\n        key={idx}\n        onPress={() => {\n          setInput(item);\n          setShowSuggestions(false);\n        }}\n        style={styles.suggestionPill}\n      >\n        <Text style={styles.suggestionText}>{item}</Text>\n      </TouchableOpacity>\n    ))}\n  </View>\n)}\n      <View style={styles.inputBar}>\n        <TouchableOpacity\n  style={[\n  styles.hashButton,\n  showSuggestions && styles.hashButtonActive\n]}\n  onPress={() => setShowSuggestions((prev) => !prev)}\n>\n\n\n  <Text style={styles.hashText}>#</Text>\n</TouchableOpacity>\n\n\n\n\n\n        <TextInput\n          style={styles.textInput}\n          placeholder=\"Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî\"\n          placeholderTextColor=\"#aaa\"\n          value={input}\n          onChangeText={setInput}\n          onSubmitEditing={sendMessage}\n        />\n        {/* <TouchableOpacity style={styles.searchButton} onPress={sendMessage}> */}\n          <TouchableOpacity onPress={sendMessage}>\n          <SearchIcon width={24} height={24} />\n        </TouchableOpacity>\n      </View>\n    </KeyboardAvoidingView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#003340',\n  },\n  chatContainer: {\n    flexGrow: 1, // ‚úÖ Ïù¥ Ï§Ñ Ï∂îÍ∞Ä!\n    paddingTop: 60,\n    paddingHorizontal: 20,\n    paddingBottom: 120,\n  },\n  botMessage: {\n    backgroundColor: '#E0E6E7',\n    borderRadius: 10,\n    padding: 12,\n    alignSelf: 'flex-start',\n    marginBottom: 10,\n    maxWidth: '80%', // ‚úÖ Ïú†Îèô ÌÅ¨Í∏∞ Ï†úÌïú\n    marginRight: 30, // ‚úÖ Ïò§Î•∏Ï™Ω Ïó¨Î∞± Ï∂îÍ∞Ä\n    //flexShrink: 1,   // ‚úÖ ÌÖçÏä§Ìä∏ ÎÑòÏπ† Í≤ΩÏö∞ Ï§ÑÏù¥Í∏∞ ÌóàÏö©\n    //flexWrap: 'wrap', // ‚úÖ ÌÖçÏä§Ìä∏ Ï§ÑÎ∞îÍøà ÌóàÏö©\n  },\n  botText: {\n    color: '#222',\n    fontSize: 15,\n    lineHeight: 22,\n  },\n  userMessage: {\n    backgroundColor: '#D567A1',\n    borderRadius: 10,\n    padding: 12,\n    alignSelf: 'flex-end',\n    marginBottom: 10,\n    maxWidth: '80%',\n  },\n  userText: {\n    color: 'white',\n    fontSize: 15,\n  },\n  inputBar: {\n    position: 'absolute',\n    bottom: 65,\n    left: 0,\n    right: 0,\n    flexDirection: 'row',\n    padding: 18,\n    backgroundColor: '#003340',\n    alignItems: 'center',\n  },\n  hashButton: {\n    width: 36,\n    height: 36,\n    borderRadius: 10,\n    backgroundColor: '#D567A1',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: 8,\n  },\n\n  hashButtonActive: {\n  backgroundColor: '#738C93', // ‚úÖ ÎàåÎ†ÄÏùÑ Îïå Ï°∞Í∏à ÏßÑÌïú ÌïëÌÅ¨ ÏòàÏãú\n},\n\n  hashText: {\n    color: 'white',\n    fontWeight: 'bold',\n    fontSize: 20,\n  },\n\n  suggestionContainer: {\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n  bottom: 140,\n  paddingHorizontal: 20,\n  paddingTop: 20,\n  paddingBottom: 20,\n  gap: 8, // React Native >= 0.71\n  backgroundColor: '#738C93',\n},\n\nsuggestionPill: {\n  backgroundColor: '#e5e5e5',\n  paddingVertical: 8,\n  paddingHorizontal: 10,\n  borderRadius: 20,\n  marginRight: 8,   \n  marginBottom: 4,\n  \n},\n\nsuggestionText: {\n  fontSize: 14,\n  color: '#003340',\n},\n\n  textInput: {\n    flex: 1,\n    backgroundColor: '#3D5B66',\n    borderRadius: 10,\n    paddingHorizontal: 15,\n    paddingVertical: 10,\n    color: 'white',\n    fontSize: 15,\n    marginRight: 8,\n  },\n  // searchButton: {\n  //   padding: 8,\n  // },\n  searchText: {\n    fontSize: 20,\n    color: 'white',\n  },\n});\n\nexport default ChatbotScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}