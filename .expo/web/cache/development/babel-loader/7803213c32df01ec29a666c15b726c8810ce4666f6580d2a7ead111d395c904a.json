{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { getNewAccessToken } from \"./token\";\nimport { API_BASE_URL } from \"./apiConfig\";\nexport var fetchPortfolio = function () {\n  var _ref = _asyncToGenerator(function* (navigation, setPortfolioData, setLoading) {\n    console.log(\"📥 포트폴리오 요청 시작\");\n    try {\n      setLoading(true);\n      var accessToken = yield getNewAccessToken(navigation);\n      if (!accessToken) {\n        console.error(\"❌ AccessToken 없음. 요청 중단.\");\n        setLoading(false);\n        return;\n      }\n      var url = API_BASE_URL + \"trading/portfolio/\";\n      console.log(\"📡 요청 URL:\", url);\n      var response = yield fetch(url, {\n        method: \"GET\",\n        headers: {\n          Authorization: \"Bearer \" + accessToken,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      console.log(\"📬 응답 상태 코드:\", response.status);\n      if (!response.ok) {\n        throw new Error(\"HTTP error! status: \" + response.status);\n      }\n      var result = yield response.json();\n      console.log(\"📦 포트폴리오 응답:\", result);\n      if ((result == null ? void 0 : result.status) !== \"success\" || !Array.isArray(result.portfolio)) {\n        console.warn(\"⚠️ 응답 구조가 예상과 다릅니다:\", result);\n        setPortfolioData([]);\n        return;\n      }\n      var parsedData = result.portfolio.filter(function (item) {\n        return item.quantity > 0;\n      }).map(function (item, index) {\n        return {\n          id: item.stock_code + \"-\" + index,\n          name: item.stock_name,\n          symbol: item.stock_code,\n          price: item.current_price,\n          change: item.profit_rate,\n          quantity: item.quantity,\n          average_price: item.average_price,\n          totalBuyPrice: item.average_price * item.quantity,\n          current_value: item.current_price * item.quantity,\n          profit_amount: (item.current_price - item.average_price) * item.quantity\n        };\n      });\n      console.log(\"✅ 파싱된 포트폴리오 데이터:\", parsedData);\n      setPortfolioData(parsedData);\n    } catch (error) {\n      console.error(\"❌ 포트폴리오 요청 실패:\", error);\n      setPortfolioData([]);\n    } finally {\n      setLoading(false);\n    }\n  });\n  return function fetchPortfolio(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["getNewAccessToken","API_BASE_URL","fetchPortfolio","_ref","_asyncToGenerator","navigation","setPortfolioData","setLoading","console","log","accessToken","error","url","response","fetch","method","headers","Authorization","status","ok","Error","result","json","Array","isArray","portfolio","warn","parsedData","filter","item","quantity","map","index","id","stock_code","name","stock_name","symbol","price","current_price","change","profit_rate","average_price","totalBuyPrice","current_value","profit_amount","_x","_x2","_x3","apply","arguments"],"sources":["/Users/seungyeon/Doodook_Frontend/src/utils/portfolio.js"],"sourcesContent":["import { getNewAccessToken } from \"./token\";\nimport { API_BASE_URL } from \"./apiConfig\";\n\nexport const fetchPortfolio = async (\n  navigation,\n  setPortfolioData,\n  setLoading\n) => {\n  console.log(\"📥 포트폴리오 요청 시작\");\n\n  try {\n    setLoading(true);\n\n    const accessToken = await getNewAccessToken(navigation);\n    if (!accessToken) {\n      console.error(\"❌ AccessToken 없음. 요청 중단.\");\n      setLoading(false);\n      return;\n    }\n\n    const url = `${API_BASE_URL}trading/portfolio/`;\n    console.log(\"📡 요청 URL:\", url);\n\n    const response = await fetch(url, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    console.log(\"📬 응답 상태 코드:\", response.status);\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const result = await response.json();\n    console.log(\"📦 포트폴리오 응답:\", result);\n\n    if (result?.status !== \"success\" || !Array.isArray(result.portfolio)) {\n      console.warn(\"⚠️ 응답 구조가 예상과 다릅니다:\", result);\n      setPortfolioData([]);\n      return;\n    }\n\n    // 수량이 0인 항목은 제외하고 파싱\n    const parsedData = result.portfolio\n      .filter((item) => item.quantity > 0) // 보유 수량이 0보다 큰 것만 필터링\n      .map((item, index) => ({\n        id: `${item.stock_code}-${index}`,\n        name: item.stock_name,\n        symbol: item.stock_code,\n        price: item.current_price,\n        change: item.profit_rate,\n        quantity: item.quantity,\n        average_price: item.average_price,\n        totalBuyPrice: item.average_price * item.quantity,\n        current_value: item.current_price * item.quantity,\n        profit_amount:\n          (item.current_price - item.average_price) * item.quantity,\n      }));\n\n    console.log(\"✅ 파싱된 포트폴리오 데이터:\", parsedData);\n    setPortfolioData(parsedData);\n  } catch (error) {\n    console.error(\"❌ 포트폴리오 요청 실패:\", error);\n    setPortfolioData([]);\n  } finally {\n    setLoading(false);\n  }\n};\n"],"mappings":";AAAA,SAASA,iBAAiB;AAC1B,SAASC,YAAY;AAErB,OAAO,IAAMC,cAAc;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAC5BC,UAAU,EACVC,gBAAgB,EAChBC,UAAU,EACP;IACHC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAE7B,IAAI;MACFF,UAAU,CAAC,IAAI,CAAC;MAEhB,IAAMG,WAAW,SAASV,iBAAiB,CAACK,UAAU,CAAC;MACvD,IAAI,CAACK,WAAW,EAAE;QAChBF,OAAO,CAACG,KAAK,CAAC,0BAA0B,CAAC;QACzCJ,UAAU,CAAC,KAAK,CAAC;QACjB;MACF;MAEA,IAAMK,GAAG,GAAMX,YAAY,uBAAoB;MAC/CO,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEG,GAAG,CAAC;MAE9B,IAAMC,QAAQ,SAASC,KAAK,CAACF,GAAG,EAAE;QAChCG,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACPC,aAAa,cAAYP,WAAa;UACtC,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEFF,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEI,QAAQ,CAACK,MAAM,CAAC;MAE5C,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,0BAAwBP,QAAQ,CAACK,MAAQ,CAAC;MAC3D;MAEA,IAAMG,MAAM,SAASR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACpCd,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEY,MAAM,CAAC;MAEnC,IAAI,CAAAA,MAAM,oBAANA,MAAM,CAAEH,MAAM,MAAK,SAAS,IAAI,CAACK,KAAK,CAACC,OAAO,CAACH,MAAM,CAACI,SAAS,CAAC,EAAE;QACpEjB,OAAO,CAACkB,IAAI,CAAC,qBAAqB,EAAEL,MAAM,CAAC;QAC3Cf,gBAAgB,CAAC,EAAE,CAAC;QACpB;MACF;MAGA,IAAMqB,UAAU,GAAGN,MAAM,CAACI,SAAS,CAChCG,MAAM,CAAC,UAACC,IAAI;QAAA,OAAKA,IAAI,CAACC,QAAQ,GAAG,CAAC;MAAA,EAAC,CACnCC,GAAG,CAAC,UAACF,IAAI,EAAEG,KAAK;QAAA,OAAM;UACrBC,EAAE,EAAKJ,IAAI,CAACK,UAAU,SAAIF,KAAO;UACjCG,IAAI,EAAEN,IAAI,CAACO,UAAU;UACrBC,MAAM,EAAER,IAAI,CAACK,UAAU;UACvBI,KAAK,EAAET,IAAI,CAACU,aAAa;UACzBC,MAAM,EAAEX,IAAI,CAACY,WAAW;UACxBX,QAAQ,EAAED,IAAI,CAACC,QAAQ;UACvBY,aAAa,EAAEb,IAAI,CAACa,aAAa;UACjCC,aAAa,EAAEd,IAAI,CAACa,aAAa,GAAGb,IAAI,CAACC,QAAQ;UACjDc,aAAa,EAAEf,IAAI,CAACU,aAAa,GAAGV,IAAI,CAACC,QAAQ;UACjDe,aAAa,EACX,CAAChB,IAAI,CAACU,aAAa,GAAGV,IAAI,CAACa,aAAa,IAAIb,IAAI,CAACC;QACrD,CAAC;MAAA,CAAC,CAAC;MAELtB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEkB,UAAU,CAAC;MAC3CrB,gBAAgB,CAACqB,UAAU,CAAC;IAC9B,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtCL,gBAAgB,CAAC,EAAE,CAAC;IACtB,CAAC,SAAS;MACRC,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAAA,gBApEYL,cAAcA,CAAA4C,EAAA,EAAAC,GAAA,EAAAC,GAAA;IAAA,OAAA7C,IAAA,CAAA8C,KAAA,OAAAC,SAAA;EAAA;AAAA,GAoE1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}