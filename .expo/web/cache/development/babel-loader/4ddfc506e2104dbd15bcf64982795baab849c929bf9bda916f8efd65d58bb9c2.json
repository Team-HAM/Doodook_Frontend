{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { getNewAccessToken } from \"./token\";\nimport { API_BASE_URL } from \"./apiConfig\";\nexport var fetchUserBalance = function () {\n  var _ref = _asyncToGenerator(function* (navigation, setBalance) {\n    try {\n      var accessToken = yield getNewAccessToken(navigation);\n      if (!accessToken) {\n        console.error(\"액세스 토큰이 없습니다.\");\n        return;\n      }\n      console.log(\"사용 중인 액세스 토큰:\", accessToken);\n      var response = yield fetch(API_BASE_URL + \"users/account/\", {\n        headers: {\n          Authorization: \"Bearer \" + accessToken,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      console.log(\"응답 상태:\", response.status);\n      var text = yield response.text();\n      console.log(\"응답 본문:\", text);\n      try {\n        var _data$data;\n        var data = JSON.parse(text);\n        console.log(\"전체 데이터:\", data);\n        var userBalance = null;\n        if ((data == null ? void 0 : data.status) === \"success\" && (data == null ? void 0 : (_data$data = data.data) == null ? void 0 : _data$data.balance) !== undefined) {\n          userBalance = data.data.balance;\n          console.log(\"응답에서 잔고 찾음:\", userBalance);\n        } else if ((data == null ? void 0 : data.balance) !== undefined) {\n          userBalance = data.balance;\n          console.log(\"대체 경로에서 잔고 찾음:\", userBalance);\n        } else {\n          console.warn(\"알 수 없는 응답 구조:\", data);\n          userBalance = 0;\n        }\n        var formatted = Number(userBalance || 0).toLocaleString() + \"원\";\n        console.log(\"최종 형식화된 잔고:\", formatted);\n        setBalance(formatted);\n      } catch (jsonErr) {\n        console.error(\"JSON 파싱 실패:\", jsonErr);\n        setBalance(\"0원\");\n      }\n    } catch (err) {\n      console.error(\"잔고 요청 실패:\", err);\n      setBalance(\"0원\");\n    }\n  });\n  return function fetchUserBalance(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["AsyncStorage","getNewAccessToken","API_BASE_URL","fetchUserBalance","_ref","_asyncToGenerator","navigation","setBalance","accessToken","console","error","log","response","fetch","headers","Authorization","status","text","_data$data","data","JSON","parse","userBalance","balance","undefined","warn","formatted","Number","toLocaleString","jsonErr","err","_x","_x2","apply","arguments"],"sources":["/Users/seungyeon/Doodook_Frontend/src/utils/account.js"],"sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { getNewAccessToken } from \"./token\";\nimport { API_BASE_URL } from \"./apiConfig\";\n\n// 사용자 잔고를 불러와 setBalance에 설정해주는 함수\nexport const fetchUserBalance = async (navigation, setBalance) => {\n  try {\n    const accessToken = await getNewAccessToken(navigation);\n    if (!accessToken) {\n      console.error(\"액세스 토큰이 없습니다.\");\n      return;\n    }\n\n    console.log(\"사용 중인 액세스 토큰:\", accessToken);\n\n    const response = await fetch(`${API_BASE_URL}users/account/`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    console.log(\"응답 상태:\", response.status);\n    const text = await response.text();\n    console.log(\"응답 본문:\", text);\n\n    try {\n      const data = JSON.parse(text);\n      console.log(\"전체 데이터:\", data);\n\n      let userBalance = null;\n\n      if (data?.status === \"success\" && data?.data?.balance !== undefined) {\n        userBalance = data.data.balance;\n        console.log(\"응답에서 잔고 찾음:\", userBalance);\n      } else if (data?.balance !== undefined) {\n        userBalance = data.balance;\n        console.log(\"대체 경로에서 잔고 찾음:\", userBalance);\n      } else {\n        console.warn(\"알 수 없는 응답 구조:\", data);\n        userBalance = 0;\n      }\n\n      const formatted = Number(userBalance || 0).toLocaleString() + \"원\";\n      console.log(\"최종 형식화된 잔고:\", formatted);\n      setBalance(formatted);\n    } catch (jsonErr) {\n      console.error(\"JSON 파싱 실패:\", jsonErr);\n      setBalance(\"0원\");\n    }\n  } catch (err) {\n    console.error(\"잔고 요청 실패:\", err);\n    setBalance(\"0원\");\n  }\n};\n"],"mappings":";AAAA,OAAOA,YAAY,MAAM,2CAA2C;AACpE,SAASC,iBAAiB;AAC1B,SAASC,YAAY;AAGrB,OAAO,IAAMC,gBAAgB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,UAAU,EAAEC,UAAU,EAAK;IAChE,IAAI;MACF,IAAMC,WAAW,SAASP,iBAAiB,CAACK,UAAU,CAAC;MACvD,IAAI,CAACE,WAAW,EAAE;QAChBC,OAAO,CAACC,KAAK,CAAC,eAAe,CAAC;QAC9B;MACF;MAEAD,OAAO,CAACE,GAAG,CAAC,eAAe,EAAEH,WAAW,CAAC;MAEzC,IAAMI,QAAQ,SAASC,KAAK,CAAIX,YAAY,qBAAkB;QAC5DY,OAAO,EAAE;UACPC,aAAa,cAAYP,WAAa;UACtC,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEFC,OAAO,CAACE,GAAG,CAAC,QAAQ,EAAEC,QAAQ,CAACI,MAAM,CAAC;MACtC,IAAMC,IAAI,SAASL,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCR,OAAO,CAACE,GAAG,CAAC,QAAQ,EAAEM,IAAI,CAAC;MAE3B,IAAI;QAAA,IAAAC,UAAA;QACF,IAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC;QAC7BR,OAAO,CAACE,GAAG,CAAC,SAAS,EAAEQ,IAAI,CAAC;QAE5B,IAAIG,WAAW,GAAG,IAAI;QAEtB,IAAI,CAAAH,IAAI,oBAAJA,IAAI,CAAEH,MAAM,MAAK,SAAS,IAAI,CAAAG,IAAI,qBAAAD,UAAA,GAAJC,IAAI,CAAEA,IAAI,qBAAVD,UAAA,CAAYK,OAAO,MAAKC,SAAS,EAAE;UACnEF,WAAW,GAAGH,IAAI,CAACA,IAAI,CAACI,OAAO;UAC/Bd,OAAO,CAACE,GAAG,CAAC,aAAa,EAAEW,WAAW,CAAC;QACzC,CAAC,MAAM,IAAI,CAAAH,IAAI,oBAAJA,IAAI,CAAEI,OAAO,MAAKC,SAAS,EAAE;UACtCF,WAAW,GAAGH,IAAI,CAACI,OAAO;UAC1Bd,OAAO,CAACE,GAAG,CAAC,gBAAgB,EAAEW,WAAW,CAAC;QAC5C,CAAC,MAAM;UACLb,OAAO,CAACgB,IAAI,CAAC,eAAe,EAAEN,IAAI,CAAC;UACnCG,WAAW,GAAG,CAAC;QACjB;QAEA,IAAMI,SAAS,GAAGC,MAAM,CAACL,WAAW,IAAI,CAAC,CAAC,CAACM,cAAc,CAAC,CAAC,GAAG,GAAG;QACjEnB,OAAO,CAACE,GAAG,CAAC,aAAa,EAAEe,SAAS,CAAC;QACrCnB,UAAU,CAACmB,SAAS,CAAC;MACvB,CAAC,CAAC,OAAOG,OAAO,EAAE;QAChBpB,OAAO,CAACC,KAAK,CAAC,aAAa,EAAEmB,OAAO,CAAC;QACrCtB,UAAU,CAAC,IAAI,CAAC;MAClB;IACF,CAAC,CAAC,OAAOuB,GAAG,EAAE;MACZrB,OAAO,CAACC,KAAK,CAAC,WAAW,EAAEoB,GAAG,CAAC;MAC/BvB,UAAU,CAAC,IAAI,CAAC;IAClB;EACF,CAAC;EAAA,gBAjDYJ,gBAAgBA,CAAA4B,EAAA,EAAAC,GAAA;IAAA,OAAA5B,IAAA,CAAA6B,KAAA,OAAAC,SAAA;EAAA;AAAA,GAiD5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}